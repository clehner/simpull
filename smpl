#!/bin/bash

api_base='https://bank.simple.com';

prog=$(basename "$0")
lib_dir=$(dirname $([ -L $0 ] && readlink -f $0 || echo $0))/lib
cookie_jar=${SIMPLE_COOKIEJAR:-~/.smpl_cookies.txt}
cookie_jar_checked=
cache_dir="/tmp/smpl-$USER"
pager=${PAGER:-less -RFX}
watch_interval=30

opt_verbose=
opt_nocache=
opt_raw=

# Check if a file is accessible to other users
insecure_file() {
	[[ -n $(
		find "$1" -maxdepth 0 -perm +066 2>&-
		find "$1" -maxdepth 0 -perm /066 2>&-
	) ]]
}

# Check the cookie file and create it if necessary
check_cookies() {
	if [[ ! -e "$cookie_jar" ]]
	then
		# create the cookie jar
		touch "$cookie_jar"
		chmod 600 "$cookie_jar"
		return
	fi

	if [[ -z $cookie_jar_checked ]]
	then
		if insecure_file "$cookie_jar"
		then
			echo "Warning: $cookie_jar has insecure permissions." >&2
		fi
		cookie_jar_checked=1
	fi
}

check_cachedir() {
	if [[ ! -e "$cache_dir" ]]
	then
		mkdir -p "$cache_dir"
		chmod 700 "$cache_dir"
		return
	fi

	if [[ -z $cache_dir_checked ]]
	then
		if insecure_file "$cache_dir"
		then
			echo "Warning: $cache_dir has insecure permissions." >&2
		fi

		# clean out the cache dir. delete files older than one day
		find "$cache_dir" -mtime +0 -exec echo rm {} \+

		cache_dir_checked=1
	fi
}

req() {
	local url="$api_base$1"
	shift
	[[ $opt_verbose ]] && echo req $url >&2
	check_cookies
	curl -s -b "$cookie_jar" -c "$cookie_jar" "$url" $@
}

# Make a request, and try to log in if needed
req_try() {
	req $@ -i | awk '
		body==1 { print; next }
		/^Location:.*signin/ { exit 99 }
		length($0) == 1 { body=1 }'
	case $? in
		99)
			# Log in and retry the request
			signin
			req_try $@
	esac
}

# Make a request
req_cached() {
	check_cachedir

	local path="${1#/}"
	local cache_file="$cache_dir/${path//\//-}"
	if [[ -z "$opt_nocache" && -s "$cache_file" ]]
	then cat "$cache_file"
	else
		trap "rm $cache_file" SIGHUP SIGINT SIGTERM
		req_try $@ | tee "$cache_file"
	fi
}

render_object() {
	[[ $opt_raw ]] && exec cat

	awk -f "$lib_dir/"json.awk -f "$lib_dir/view/$1" | $pager
}

# Empty the cache
clean_cache() {
	rm -rf "$cache_dir"
}

simple_help() {
	case "$1" in
		'') cat <<EOF
Usage: $prog <command> [options]
Commands:
    help            Get help about commands
    card            Get card info
    account         Get account info
    balance         Get balance
    linked-accounts Get linked accounts
    transactions    Get transactions
    clean           Empty the cache
Options:
    -v --verbose    Be more verbose
    -n --no-cache   Skip cache
    -r --raw        Return raw JSON
    -h --help       Get help about commands
EOF

	;; help) cat <<EOF
Usage: $prog $1 [command]

Get info about a $prog subcommand
EOF

	;; card) cat <<EOF
Usage: $prog $1

Get info about a Simple card.
EOF

	;; balance) cat <<EOF
Usage: $prog $1

Get card balance (total, pending, and available)
EOF

	;; transactions) cat <<EOF
Usage: $prog $1 [options]

Get a listing of account transactions.

Options:
    -a --all        Show the entire transaction history rather than recent only
    -f --follow     Show new transactions as they are posted
    --format=TYPE   Specify a format. Options are 'simple' and 'ledger'.
    --since=NUMBER  Show transactions from the past number of hours
EOF

	;; account) cat <<EOF
Usage: $prog $1

Get info about your Simple account. Shows your contact information.
EOF

	;; linked-accounts) cat <<EOF
Usage: $prog $1

List linked accounts. Show their bank name, account type, routing number,
and account number.
EOF

	;; clean-cache) cat <<EOF
Usage: $prog $1

Delete files for cached requests by $prog.
EOF

	;; *) cat <<EOF
Unknown command '$1'. See '$prog help'.
EOF
	return 1
	;;
	esac
}

get_csrf() {
	req '/signin' | sed -n 's/.*value="\([^"]*\)\" name="_csrf".*/\1/p'
}

# Log in and validate the session.
signin() {
	local username password
	local csrf=$(get_csrf)

	if [[ -z "$csrf" ]]
	then echo "Cannot find CSRF" >&2; return 1
	fi

	if [[ -n "$SIMPLE_USERNAME" ]]
	then username="$SIMPLE_USERNAME"
	else read -rp 'Username: ' username
	fi

	if [[ -n "$SIMPLE_PASSWORD" ]]
	then password="$SIMPLE_PASSWORD"
	elif [[ -n "$SIMPLE_PASSCMD" ]]
	then password="$(sh -c "$SIMPLE_PASSCMD")"
	else read -rsp 'Passphrase: ' password; echo >&2
	fi

	req '/signin' \
		--data-urlencode "username=$username"\
		--data-urlencode "password=$password"\
		--data-urlencode "_csrf=$csrf"
}

simple_card() {
	# using a bogus user id works
	local userid=_
	req_cached "/card-api/users/$userid/card_status" | render_object card
}

simple_account() {
	req_cached '/user-api/users/_' | render_object account
}

simple_balance()  {
	req_cached '/api/account/balances' | render_object balance
}

simple_transactions() {
	local query=
	local format=simple
	local opt_follow=
	local opt_since=
	for arg
	do case "$arg" in
		--all|-a) query='?all=true';;
		--follow|-f) opt_follow=1;;
		--format=simple) format=simple;;
		--format=ledger|-l) format=ledger;;
		--format=*) echo "Unknown format ${arg#--format=}" >&2
			return 1;;
		--since=*) opt_since="${arg#--since=}";;
	esac done

	if [[ -n $opt_since ]]
	then
		local timestamp=$((($(date +%s) - opt_since * 3600) * 1000))
		req_try "/transactions/new_transactions?timestamp=${timestamp}"
	elif [[ -z $opt_follow ]]
	then
		req_cached "/transactions/data$query"
	else
		while local timestamp=$(date +%s000)
		do
			req_try "/transactions/new_transactions?timestamp=${timestamp}"
			sleep $watch_interval
		done
	fi | case $format in
		simple) render_object transactions-simple;;
		ledger) render_object transactions-ledger;;
	esac
}

simple_linked_accounts() {
	req_cached '/linked-accounts' | render_object linked-accounts
}

invalid_command() {
	echo "$prog: '$1' is not a $prog command. See '$prog help'" >&2
	exit 127
}

# handle global flags
i=1
cmd=
args=
for arg; do
	case "$arg" in
		-v|--verbose) opt_verbose=1;;
		-n|--no-cache) opt_nocache=1;;
		-r|--raw) opt_raw=1;;
		-h|--help)
			[[ -n "$cmd" ]] && args="$cmd"
			cmd=help;;
		--) args="$args ${@:i+1}"; break;;
		*)
			if [[ -z "$cmd" ]]
			then cmd="$arg"
			else args="$args $arg"
			fi
	esac
	((i++))
done
set -- "$args"

case "$cmd" in
	help|'') simple_help $@;;
	card) simple_card $@;;
	balance) simple_balance $@;;
	transactions) simple_transactions $@;;
	account) simple_account $@;;
	linked-accounts) simple_linked_accounts $@;;
	clean-cache) clean_cache $@;;
	*) invalid_command $cmd;;
esac
